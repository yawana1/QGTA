package main;

import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;

import main.trialanalysis.TrialAnalysisJobDef;
import main.trialanalysis.TrialAnalysisJobProcess;

import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

import utils.ArgumentParser;
import utils.Globals.JobTypes;
import data.TrialXML;
import data.XML;
import data.xml.objects.App;
import error.ErrorMessage;

public class Main {

	private static Logger log;
	private final static String APP_CONFIG = "App.xml"; //default app config file
	
	static private void registerShutdownHook(final String jobid, final String asUrl) {
	    Runtime.getRuntime().addShutdownHook(new Thread() {
	        public void run() { 
	    		try(CloseableHttpClient httpclient = HttpClients.createDefault()) {
		    		HttpGet get = new HttpGet(asUrl + "/completed/" + jobid);
	    			httpclient.execute(get);
	    		} catch (ClientProtocolException e1) {
	    			e1.printStackTrace();
	    		} catch (IOException e1) {
	    			e1.printStackTrace();
	    		}
        	}
	    });
	}
	
	static private void registerStart(String jobid, String asUrl) {
		
		try(CloseableHttpClient httpclient = HttpClients.createDefault()) {
			HttpGet get = new HttpGet(asUrl + "/started/" + jobid);
			httpclient.execute(get);
			registerShutdownHook(jobid, asUrl);
		} catch (ClientProtocolException e1) {
			e1.printStackTrace();
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	
	}
	
	/**
	 * Parse command line arguments and load app config from arguments or use default.
	 * Configure logger
	 * Run the job type passed in jobDef, run a single trialAnalysis or queue trialAnlaysis jobs to the cluster
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		try{
			//Parse command line args
			ArgumentParser argumentParser = null;
			try{
				argumentParser = new ArgumentParser(args);
			}
			catch(Exception e){
				System.err.println("Command line args not read correctly");
				throw e;
			}
			
			// This is only used when jobs are queued to the cluster from the Application Server
			String jobId = argumentParser.getOption("jobId");
			String asUrl = argumentParser.getOption("asUrl");
			if (jobId != null) {
				if (asUrl == null) {
					System.out.println("Required argument asUrl missing.");
				} else {
					// Call into Application Server to register start for jobId
					registerStart(jobId, asUrl);
				}
			}
			
			//Read App config from args or use default
			String appConfigArg = null;
			String appConfig = null;
			if((appConfigArg = argumentParser.getOption("appConfig")) != null){
				//load App Config defined by the command line
				if(Files.isReadable(Paths.get(appConfigArg))){
					appConfig = appConfigArg;
				}
				else{
					System.err.println("App config passed in is not found or readable");
				}
			}
			else{
				//load default App Config on the classpath
				URL url = Thread.currentThread().getContextClassLoader().getResource(APP_CONFIG); 
				
				if(url == null){
					System.err.println("App.xml not on the classpath");
				}
				else{
					appConfig = url.getFile();
				}
			}
			 
			if(appConfig == null){
				System.err.println("App config file not found");
			}
			else{
				XML.INSTANCE = TrialXML.INSTANCE;
				XML.INSTANCE.deserialize(appConfig, App.INSTANCE);
				
				//setup the logger
				URL logFile = Thread.currentThread().getContextClassLoader().getResource("log4j.properties");
				System.setProperty("log.file","main");
				System.setProperty("log.dir",App.INSTANCE.getLogDir());
				PropertyConfigurator.configure(logFile);
				log = Logger.getLogger(Main.class.getName()); //load logger after configured
				
				//run the job passed into the command line
				String jobCommand = null;
				if((jobCommand = argumentParser.getOption("job")) == null){
					log.fatal("Job " + ErrorMessage.INSTANCE.getMessage("null_value"));
				}
				else{
					JobTypes job = JobTypes.valueOf(jobCommand);
					boolean force = Boolean.parseBoolean(argumentParser.getOption("force")); //not set equals false
					String exp = argumentParser.getOption("exp");
					
					switch(job){
						case trialdefinition : {
							TrialAnalysisJobDef ta = new TrialAnalysisJobDef(force, exp, App.INSTANCE.getJobDefDirectory(), null);
							ta.run();
							break;
						}case trialanalysis : {
							TrialAnalysisJobProcess taProcess = new TrialAnalysisJobProcess(true);
							taProcess.start(exp);
							break;
						}case queueToCluster : {
							TrialAnalysisJobProcess taProcess = new TrialAnalysisJobProcess(false);
							taProcess.start(exp, true);
							break;
						}default:{
							log.fatal("Not a valid job parameter");
							break;
						}
					}
				}
			}
		}
		catch (Exception e) {
			e.printStackTrace(); //pick up error before log4j is configed
			log.fatal("", e);
		}
	} 
}