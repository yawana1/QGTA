package io;

import java.io.IOException;
import java.lang.Exception;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.FileVisitResult;
import java.nio.file.Path;
import java.nio.file.SimpleFileVisitor;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import data.Model;
import data.Trait;
import data.Trial;

public class WorkDirectorySimpleFileVisitor extends SimpleFileVisitor<Path> {
	
	static Logger objLogger = Logger.getLogger(WorkDirectorySimpleFileVisitor.class.getName());
	private List<Trial> lstTrials;
	
	public WorkDirectorySimpleFileVisitor() throws Exception {
		this.lstTrials = new ArrayList<Trial>();
	}
	
	@Override public FileVisitResult visitFile(Path objInFilePath,
		                                       BasicFileAttributes objInBasicFileAttributes) throws IOException {
		String strFilePath;
		
		strFilePath = objInFilePath.toString();
		if (strFilePath.endsWith(".asr")) {
			this.getAsrDirectoryEnvironment(objInFilePath);
		}
		
		return FileVisitResult.CONTINUE;
	}
	
	private void getAsrDirectoryEnvironment(Path objInFilePath) {
		String strFilePath; 
		String[] strArrayLineParts;
		Path objTraitPath;
		String strTrialName;
		Path objModelPath;
		String strModelName;
		Path objTrialPath;
		String strTraitName;
		Trial objTrial;
		int intTrialIndex;
		Model objModel;
		int intModelIndex;
		Trait objTrait;
		
		strFilePath = objInFilePath.toString();
		if (strFilePath.endsWith(".asr")) {
			if (3 <= (strFilePath.toString().split("\\/").length)) {
				
				objTraitPath = objInFilePath.getParent();
				strArrayLineParts = objTraitPath.toString().split("\\/");
				strTraitName = strArrayLineParts[strArrayLineParts.length - 1];

				objModelPath = objTraitPath.getParent();
				strArrayLineParts = objModelPath.toString().split("\\/");
				strModelName = strArrayLineParts[strArrayLineParts.length - 1];

				objTrialPath = objModelPath.getParent();
				strArrayLineParts = objTrialPath.toString().split("\\/");
				strTrialName = strArrayLineParts[strArrayLineParts.length - 1];

				//////////
				// Trial  
				//////////				
				objTrial = new Trial(strTrialName,
						             objTrialPath);
				if (!(this.lstTrials.contains(objTrial))) {
					this.lstTrials.add(objTrial);
					System.out.println("Processing a new trial: " + objTrial.getName() + "...");
				}	 
				else {
					//System.out.println(objTrial.getName() + " is already in!");
				}
				intTrialIndex = this.lstTrials.indexOf(objTrial);
				objTrial = this.lstTrials.get(intTrialIndex);
				
				//////////
				// Model  
				//////////				
				objModel = new Model(strModelName,
			                         objModelPath);
				if (!(objTrial.getModels().contains(objModel))) {
					this.lstTrials.get(intTrialIndex).addModel(objModel);
					System.out.println("Processing a new model: " + objModel.getName() + " in " + objTrial.getName() + "...");
				}	 
				else {
					//System.out.println(objModel.getName() + " is already in " + objTrial.getName() + "!");
				}
				intModelIndex = this.lstTrials.get(intTrialIndex).getModels().indexOf(objModel);
				objModel = this.lstTrials.get(intTrialIndex).getModels().get(intModelIndex);
				
				//////////
				// Trait  
				//////////
				objTrait = new Trait(strTraitName,
                                     objTraitPath);				
				if (!(objModel.getTraits().contains(objTrait))) {
					this.lstTrials.get(intTrialIndex).getModels().get(intModelIndex).addTrait(objTrait);
					System.out.println("Processing a new trait: " + objTrait.getName() + " in " + objModel.getName() + " in " + objTrial.getName() + "...");							
				}	 
				else {
					//System.out.println("Added " + objTrait.getName() + " in " + objModel.getName() + " in " + objTrial.getName() + "...");
				}
			}
			else {
				throw new RuntimeException(objInFilePath.toString() + " seems not having the three concepts: trial, model, and trait");
			}
		}		
	} 
	
	@Override public FileVisitResult preVisitDirectory(Path objInDirectoryPath,
                                                       BasicFileAttributes objInBasicFileAttributes)  throws IOException {
		//System.out.println("Previsiting the directory: " + objInDirectoryPath.getFileName().toString() + "...");
		if (!(objInDirectoryPath.getFileName().toString().startsWith("ARCHIVE_"))) {
			return FileVisitResult.CONTINUE;
		}
		else {
			return FileVisitResult.SKIP_SUBTREE;
		}
	}
	
	public List<Trial> getTrials() {
		return this.lstTrials;
	}
}

 