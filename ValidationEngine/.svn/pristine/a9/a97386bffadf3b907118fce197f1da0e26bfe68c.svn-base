package io;

import java.io.IOException;
import java.lang.Exception;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.FileVisitResult;
import java.nio.file.Path;
import java.nio.file.SimpleFileVisitor;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.log4j.Logger;

import data.Report;
import io.EntrySummaryReader;
import io.ExlSummaryReader;
import io.LocSummaryReader;
import io.ExperimentSummaryReader;

public class ReportDirectorySimpleFileVisitor extends SimpleFileVisitor<Path> {

	static Logger objLogger = Logger.getLogger(ReportDirectorySimpleFileVisitor.class.getName());
	private List<Report> lstReports;
	private Set<String> setSummaryFileNames;
	private EntrySummaryReader objEntrySummaryReader;
	private ExlSummaryReader objExlSummaryReader;
	private LocSummaryReader objLocSummaryReader;
	private ExperimentSummaryReader objExperimentSummaryReader;
	
	public ReportDirectorySimpleFileVisitor() throws Exception {
		this.lstReports = new ArrayList<Report>();
		this.setSummaryFileNames = new HashSet<String>();
		this.setSummaryFileNames.add("entrySummary.txt");
		this.setSummaryFileNames.add("exlSummary.txt");
		this.setSummaryFileNames.add("experimentSummary.txt");
		this.setSummaryFileNames.add("locSummary.txt");		
	}

	@Override public FileVisitResult visitFile(Path objInFilePath,
                                               BasicFileAttributes objInBasicFileAttributes) throws IOException {
		String strFilePath;
		String[] strArrayLineParts;
		String strFileName;
		
		System.out.println("Visiting the file: " + objInFilePath + "...");
		strFilePath = objInFilePath.toString();
		strArrayLineParts = strFilePath.split("\\/");
		strFileName = strArrayLineParts[strArrayLineParts.length - 1];
		if (this.setSummaryFileNames.contains(strFileName)) {
			this.getSummaryData(objInFilePath);
		} 
		
		return FileVisitResult.CONTINUE;
	}
	
	private void getSummaryData(Path objInFilePath) {
		String strFilePath;
		String[] strArrayLineParts;
		String strTrialName;
		Report objReport;
		int intReportIndex;
		String strFileName;
		
		System.out.println("Getting the summary data from the file: " + objInFilePath + "...");
		strFilePath = objInFilePath.toString();
		strArrayLineParts = strFilePath.split("\\/");
		strTrialName = strArrayLineParts[strArrayLineParts.length - 2];
		objReport = new Report(strTrialName,
				               objInFilePath);
		if (!(this.lstReports.contains(objReport))) {
			this.lstReports.add(objReport);
		}
		intReportIndex = this.lstReports.indexOf(objReport);
		strFileName = strArrayLineParts[strArrayLineParts.length - 1];
		switch (strFileName) {
			/////////////////////
			// entrySummary.txt    
			/////////////////////				
			case "entrySummary.txt":
				try {
					if (this.lstReports.get(intReportIndex).getRecordsNumbers() == null)  {
						this.objEntrySummaryReader = new EntrySummaryReader(objInFilePath);
						System.out.println("Setting the records numbers......");
						this.lstReports.get(intReportIndex).setRecordsNumbers(this.objEntrySummaryReader.getRecordsNumbers());
						System.out.println("Setting the entry estimates......");
						this.lstReports.get(intReportIndex).setEntryEstimates(this.objEntrySummaryReader.getEstimates());
					}
					else {
						System.err.println("A possible repetition of entrySummary detected...");
						System.err.println(objInFilePath);
						throw new Exception(); 
					}
				}
				catch (Exception e) {
					objLogger.error("ReportDirectorySimpleFileVisitor.FileVisitResult", 
			                        e);					
				}
				break;

			///////////////////
			// exlSummary.txt    
			///////////////////				
			case "exlSummary.txt":
				try {
					if (this.lstReports.get(intReportIndex).getRecordsNumbers() == null)  {
						this.objExlSummaryReader = new ExlSummaryReader(objInFilePath);
						System.out.println("Setting the exl raw means......");
						this.lstReports.get(intReportIndex).setExlRawMeans(this.objExlSummaryReader.getRawMeans());
					}
					else {
						System.err.println("A possible repetition of exlSummary detected...");
						System.err.println(objInFilePath);
						throw new Exception(); 
					}
				}
				catch (Exception e) {
					objLogger.error("ReportDirectorySimpleFileVisitor.FileVisitResult", 
			                        e);					
				}
				break;

			//////////////////////////
			// experimentSummary.txt      
			//////////////////////////				
			case "experimentSummary.txt":
				try {
					if (this.lstReports.get(intReportIndex).getLocationsNumbers() == null)  {
						this.objExperimentSummaryReader = new ExperimentSummaryReader(objInFilePath);
						System.out.println("Setting the locations numbers......");
						this.lstReports.get(intReportIndex).setLocationsNumbers(this.objExperimentSummaryReader.getLocationsNumbers()); 
					}
					else {
						System.err.println("A possible repetition of experimentSummary detected...");
						System.err.println(objInFilePath);
						throw new Exception(); 
					}
				}
				catch (Exception e) {
					objLogger.error("ReportDirectorySimpleFileVisitor.FileVisitResult", 
	                        		e);					
				}				
				break;

			///////////////////
			// locSummary.txt  
			///////////////////				
			case "locSummary.txt":
				try {
					if (this.lstReports.get(intReportIndex).getRecordsNumbers() == null)  {
						this.objLocSummaryReader = new LocSummaryReader(objInFilePath);
						System.out.println("Setting the location estimates......");
						this.lstReports.get(intReportIndex).setLocationEstimates(this.objLocSummaryReader.getEstimates());
					}
					else {
						System.err.println("A possible repetition of locSummary detected...");
						System.err.println(objInFilePath);
						throw new Exception(); 
					}
				}	
				catch (Exception e) {
					objLogger.error("ReportDirectorySimpleFileVisitor.FileVisitResult", 
	                        		e);					
				}				
				break;
		}
	}
	
	@Override public FileVisitResult preVisitDirectory(Path objInDirectoryPath,
                                                       BasicFileAttributes objInBasicFileAttributes)  throws IOException {
		//System.out.println("Previsiting the directory: " + objInDirectoryPath.getFileName().toString() + "...");
		if (!(objInDirectoryPath.getFileName().toString().startsWith("ARCHIVE_"))) {
			return FileVisitResult.CONTINUE;
		}
		else {
			return FileVisitResult.SKIP_SUBTREE;
		}
	}

	public List<Report> getReports() {
		return this.lstReports;
	}
}
