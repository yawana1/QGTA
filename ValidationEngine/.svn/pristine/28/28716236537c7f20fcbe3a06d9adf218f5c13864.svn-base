package validation;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.math.stat.descriptive.DescriptiveStatistics;
import org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatistics;
import org.apache.log4j.Logger;

import asreml.output.AsrData;
import data.xml.objects.App;

import io.EntrySummaryReader;
import io.ExlSummaryReader;
import io.ExperimentSummaryReader;
import io.LocSummaryReader;
import io.ReportDirectorySimpleFileVisitor;
import io.WorkDirectorySimpleFileVisitor;

public class Validator {
	
	static Logger objLogger = Logger.getLogger(Validator.class.getName());
	private WorkDirectorySimpleFileVisitor objWorkDirectorySimpleFileVisitor;
	private List<Path> lstConvergedFilePaths;	
	private ReportDirectorySimpleFileVisitor objReportDirectorySimpleFileVisitor;
	private LocSummaryReader objLocSummaryReader;
	private EntrySummaryReader objEntrySummaryReader;
	private ExlSummaryReader objExlSummaryReader;
	private ExperimentSummaryReader objExperimentSummaryReader;
	private double[] douArrayLocationsDeviations;
	private double[] douArrayRecordsDeviations;	
	
	public Validator() {}
	
	public void run() {
		try {
			this.coverWorkDirectory();
			System.out.println();
			this.coverReportDirectory();
			this.douArrayLocationsDeviations = this.calculateDeviations(this.objExperimentSummaryReader.getNumberLocations());
		}
		catch (IOException e) {
			objLogger.error("Validator.run", 
                            e);
		}
	}
	
	private void coverWorkDirectory() throws IOException {
		try {
			this.objWorkDirectorySimpleFileVisitor = new WorkDirectorySimpleFileVisitor();
		}
		catch (Exception e) {
			objLogger.error("Validator.coverWorkDirectory", 
                            e);
		}
		Files.walkFileTree(Paths.get(App.INSTANCE.getWorkDirectory()), 
				                     this.objWorkDirectorySimpleFileVisitor);
		for (Path objPath : this.objWorkDirectorySimpleFileVisitor.lstPaths) {
			System.out.println(objPath);
		}
		System.out.println();
		this.getConvergedAsrFiles();
	}
	
	private void getConvergedAsrFiles()
	{
		AsrData objAsrData;
		String strFilePath;
		String strFilePathWithNoExtension;
		
		this.lstConvergedFilePaths = new ArrayList<Path>();
		for (Path objPath : this.objWorkDirectorySimpleFileVisitor.lstPaths) {
			// The AsrData class in the Trial Analysis project adds the extension ".asr" 
			// to the filename already with the same extension
			strFilePath = objPath.toString();
			strFilePathWithNoExtension = strFilePath.substring(0,
					                                           strFilePath.length() - 4);
			objAsrData = new AsrData(Paths.get(strFilePathWithNoExtension),
					                 0,
					                 0,
					                 0,
					                 this.objWorkDirectorySimpleFileVisitor.lstTraits,
					                 0.0);
			if (objAsrData.isConverged()) {
				this.lstConvergedFilePaths.add(objPath);
				System.out.println(strFilePath + " is converged...");
				System.out.println("---> Variance <---");
				System.out.println(objAsrData.getVariance().toString());
				//System.out.println(objAsrData.getVarianceComponets(trait));
			}
		}
	}
	
	private void coverReportDirectory() throws IOException,
	                                           FileNotFoundException {
		try {
			this.objReportDirectorySimpleFileVisitor = new ReportDirectorySimpleFileVisitor();
		}
		catch (Exception e) {
			objLogger.error("Validator.coverReportDirectory", 
                            e);
		}
		Files.walkFileTree(Paths.get(App.INSTANCE.getReportDirectory()), 
                                     this.objReportDirectorySimpleFileVisitor);
		System.out.println();
		
		// The file: locSummary.txt
		try {
			if (!(this.objReportDirectorySimpleFileVisitor.checkLocSummaryFile())) {
				throw new FileNotFoundException();
			}
			else {
				System.out.println("Processing locSummary.txt...");
				try {
					this.objLocSummaryReader = new LocSummaryReader(this.objReportDirectorySimpleFileVisitor.getLocSummaryFilePath());
				}
				catch (Exception e)	{
					objLogger.error("Validator.coverReportDirectory", 
	                                e);
				}
				System.out.println("Data in the estimate column: " + this.objLocSummaryReader.getEstimate().toString());
			}
		}
		catch (FileNotFoundException e) {
			objLogger.error("Validator.coverReportDirectory", 
	                        e);
		}
		
		// The file: entrySummary.txt
		try {
			if (!(this.objReportDirectorySimpleFileVisitor.checkEntrySummaryFile())) {
				throw new FileNotFoundException();			
			}
			else {
				System.out.println("Processing entrySummary.txt...");
				try {
					this.objEntrySummaryReader = new EntrySummaryReader(this.objReportDirectorySimpleFileVisitor.getEntrySummaryFilePath());
				}
				catch (Exception e) {
					objLogger.error("Validator.coverReportDirectory", 
		                        	e);
				}
				System.out.println("Records Number: " + this.objEntrySummaryReader.getRecordsNumber());
				System.out.println("Data in the estimate column: " + this.objEntrySummaryReader.getEstimate().toString());
			}
		}
		catch (FileNotFoundException e) {
				objLogger.error("Validator.coverReportDirectory", 
		                        e);
		}
		
		// The file: exlSummary.txt
		try {
			if (!(this.objReportDirectorySimpleFileVisitor.checkExlSummaryFile())) {
				throw new FileNotFoundException();
			}
			else {
				System.out.println("Processing exlSummary.txt...");
				try {
					this.objExlSummaryReader = new ExlSummaryReader(this.objReportDirectorySimpleFileVisitor.getExlSummaryFilePath());
				}
				catch (Exception e)	{
					objLogger.error("Validator.coverReportDirectory", 
		                        	e);
				}
				System.out.println("Data in the rawMean column: " + this.objExlSummaryReader.getRawMean().toString());
			}
		}
		catch (FileNotFoundException e) {
			objLogger.error("Validator.coverReportDirectory", 
	                        e);
		}
		
		// The file: experimentSummary.txt
		try {
			if (!(this.objReportDirectorySimpleFileVisitor.checkExperimentSummaryFile())) {
				throw new FileNotFoundException();
			}
			else {
				System.out.println("Processing experimentSummary.txt...");
				try {
					this.objExperimentSummaryReader = new ExperimentSummaryReader(this.objReportDirectorySimpleFileVisitor.getExperimentSummaryFilePath());
				}
				catch (Exception e)	{
					objLogger.error("Validator.coverReportDirectory", 
		                        	e);
				}
				System.out.println("numberLocations: " + this.objExperimentSummaryReader.getNumberLocations().toString());
			}
		}
		catch (FileNotFoundException e) {
			objLogger.error("Validator.coverReportDirectory", 
	                        e);
		}
	}
	
	private double[] calculateDeviations(int[] intInArrayNumbers) {
		DescriptiveStatistics objDescriptiveStatistics;
		int intArrayIndex;
		double[] douArrayDeviations;
		
		objDescriptiveStatistics = new SynchronizedDescriptiveStatistics(); 
		for (intArrayIndex = 0;
			 intArrayIndex < intInArrayNumbers.length; 	
			 intArrayIndex++) {
			objDescriptiveStatistics.addValue(intInArrayNumbers[intArrayIndex]); 
		}
		douArrayDeviations = new double[intInArrayNumbers.length];
		for (intArrayIndex = 0;
			 intArrayIndex < douArrayDeviations.length; 	
			 intArrayIndex++) {
			douArrayDeviations[intArrayIndex] = intInArrayNumbers[intArrayIndex] - objDescriptiveStatistics.getStandardDeviation();
		}
		
		return douArrayDeviations;
	}
	
	public double[] getLocationsDeviation() {
		return this.douArrayLocationsDeviations;
	}

	public double[] getRecordsDeviation() {
		return this.douArrayRecordsDeviations;
	}
}
