package io;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.lang.NoSuchFieldException;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

public class EntrySummaryReader {

	static Logger objLogger = Logger.getLogger(EntrySummaryReader.class.getName());
	public static final String TAB = "\t";
	private Map<String, Integer> mapRecordsNumbers;
	private Map<String, List<Double>> mapEstimates;
	private List<Map<String, String>> lstMapEntrySummaryData;
	
	public EntrySummaryReader(Path objInEntrySummaryFilePath) throws NoSuchFieldException {
		BufferedReader objBufferedReader;
		int intLineNumber;
		String strLine;
		String[] strArrayHeaders;
		ArrayList<String> lstHeaders;
		int intTraitNameColumnIndex;
		int intEstimateColumnIndex;
		String[] strArrayLineParts;
		String strTraitName;
		double douEstimate;
		List<Double> lstEstimates;
		Map<String, String> mapDataLine;
		int intArrayIndex;
		
		this.mapRecordsNumbers =  new HashMap<String, Integer>();
		this.mapEstimates = new HashMap<String, List<Double>>();
		this.lstMapEntrySummaryData = new ArrayList<Map<String, String>>();
		objBufferedReader = null;
		intLineNumber = 0;
		strArrayHeaders = null;
		intTraitNameColumnIndex = 0;
		intEstimateColumnIndex = 0;
		try {
			objBufferedReader = new BufferedReader(new FileReader(objInEntrySummaryFilePath.toFile()));
			while ((strLine = objBufferedReader.readLine()) != null) {
				intLineNumber++;
				////////////////
				// The headers  
				////////////////
				if (intLineNumber == 1) {
					strArrayHeaders = strLine.trim().split(TAB);
					lstHeaders = new ArrayList<String>(Arrays.asList(strArrayHeaders));
					System.out.println("Headers: " + lstHeaders.toString());
					try {
						///////////////////
						// Records Number  
						///////////////////
						if (!(lstHeaders.contains("traitVatString"))) {
							throw new NoSuchFieldException();
						}
						else {
							intTraitNameColumnIndex = lstHeaders.indexOf("traitVatString");
						}

						///////////////////
						// Estimates List  
						///////////////////
						if (!(lstHeaders.contains("estimate"))) {
							throw new NoSuchFieldException();
						}
						else {
							intEstimateColumnIndex = lstHeaders.indexOf("estimate");
						}
					}
					catch (NoSuchFieldException e) {
						objLogger.error("EntrySummaryReader.EntrySummaryReader", 
						                e);
					}
				}
				///////////////////
				// The data lines  
				///////////////////
				else {
					strArrayLineParts = strLine.split(TAB,
	                                                  strArrayHeaders.length);
					try {
						if (strArrayHeaders.length == strArrayLineParts.length) {
							strTraitName = strArrayLineParts[intTraitNameColumnIndex];
							
							///////////////////
							// Records Number  
							///////////////////
							if (this.mapRecordsNumbers.containsKey(strTraitName)) {
								this.mapRecordsNumbers.put(strTraitName, 
										                   (this.mapRecordsNumbers.get(strTraitName) + 1));
							}
							else {
								this.mapRecordsNumbers.put(strTraitName, 
						                                   1);
							}

							///////////////////
							// Estimates List  
							///////////////////
							try {
								douEstimate = Double.parseDouble(strArrayLineParts[intEstimateColumnIndex]);
								if (this.mapEstimates.containsKey(strTraitName)) {
									lstEstimates = this.mapEstimates.get(strTraitName);
								}
								else {
									lstEstimates = new ArrayList<Double>();
								}
								lstEstimates.add(douEstimate);
								this.mapEstimates.put(strTraitName, 
								                      lstEstimates);
							}
							catch (NumberFormatException e) {
								objLogger.error("EntrySummaryReader.EntrySummaryReader", 
				                                e);
							}

							//////////////
							// Data Line 
							//////////////
							mapDataLine = new HashMap<String, String>();
							for (intArrayIndex = 0;
								 intArrayIndex < strArrayLineParts.length;	
							     intArrayIndex++) {
								mapDataLine.put(strArrayHeaders[intArrayIndex], 
									            strArrayLineParts[intArrayIndex]);
							}
							this.lstMapEntrySummaryData.add(mapDataLine);
						}
						else {
							throw new NoSuchFieldException();
						}
					}
					catch (NoSuchFieldException e) {
						objLogger.error("EntrySummaryReader.EntrySummaryReader", 
				                        e);
					}
				}
			}
		}
		catch (IOException e) {
			objLogger.error("EntrySummaryReader.EntrySummaryReader", 
					        e);
		}
		finally {
			try {
				if (objBufferedReader != null) {
					objBufferedReader.close();
				}
			} 
			catch (IOException e) {
				objLogger.error("EntrySummaryReader.EntrySummaryReader", 
				                e);
			}
		}
	}
	
	public Map<String, Integer> getRecordsNumbers() {
		return this.mapRecordsNumbers;
	}

	public Map<String, List<Double>> getEstimates() {
		return this.mapEstimates;
	}

	public List<Map<String, String>> getData() {
		return this.lstMapEntrySummaryData;
	}	
}
