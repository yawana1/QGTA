package main;

import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

import data.XML;
import data.xml.objects.App;
import utils.ArgumentParser;
import validation.ValidationProcess;

public class Main {
	private static Logger objLogger;
	private final static String APPLICATION_CONFIGURATION = "App.xml";
	private final static long START_TIME = System.currentTimeMillis();

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		ArgumentParser objArgumentParser;
		String strApplicationConfigurationArgument;
		String strApplicationConfigurationFile;
		URL objURLApplicationConfigurationFile;
		String strPrimaryModelNamesArgument;
		String[] strArrayPrimaryModelNames;
		int intIndex;
		URL objURLLogFile;
		ValidationProcess objValidationProcess; 
		
		try {
			objArgumentParser = new ArgumentParser(args);
			if (!(objArgumentParser.hasNext())) {
				System.out.println("Please enter the arguments in the command line. " + 
                                   "Example: -appConfig=App.xml -primaryModels=anova,brazil.anova");
				throw new RuntimeException("No argument(s) given in the command line");
			}
			
			///////////////////////////
			// The argument appConfig  
			///////////////////////////
			strApplicationConfigurationFile = null;
			strApplicationConfigurationArgument = objArgumentParser.getOption("appConfig");
			if (strApplicationConfigurationArgument != null) {
				if (Files.isReadable(Paths.get(strApplicationConfigurationArgument))) {
					strApplicationConfigurationFile = strApplicationConfigurationArgument;
				}
				else {
					System.out.println(Paths.get(strApplicationConfigurationArgument).toAbsolutePath().toString());
					throw new RuntimeException("The application configuration file, App.xml, is not found or readable");
				}
			}
			else {
				objURLApplicationConfigurationFile = Thread.currentThread().getContextClassLoader().getResource(APPLICATION_CONFIGURATION);
				if (objURLApplicationConfigurationFile != null) {
					strApplicationConfigurationFile = objURLApplicationConfigurationFile.getFile();
				}
				else {
					throw new RuntimeException("The application configuration file, App.xml, is not on the classpath");
				}
			}
			
			///////////////////////////////
			// The argument primaryModels  
			///////////////////////////////
			strArrayPrimaryModelNames = null;
			strPrimaryModelNamesArgument = objArgumentParser.getOption("primaryModels");
			if (strPrimaryModelNamesArgument != null) {
				strArrayPrimaryModelNames = strPrimaryModelNamesArgument.split(",");
				for (intIndex = 0;
					 intIndex < strArrayPrimaryModelNames.length;
					 intIndex++) {
					if (strArrayPrimaryModelNames[intIndex].equals("")) {
						System.out.println("There is an empty name in the list of primary models. Please fill it");
						throw new RuntimeException("No primary model name given");
					}
				}
			}
			else {
				System.out.println("Please enter the name of a primary model, at least. Example: -primaryModels=anova,brazil.anova");
				throw new RuntimeException("No primaryModels argument given");
			}
			
			///////////////////////
			// The execution call  
			///////////////////////
			if (strApplicationConfigurationFile != null) {
				XML.INSTANCE.deserialize(strApplicationConfigurationFile, 
										 App.INSTANCE);
				objURLLogFile = Thread.currentThread().getContextClassLoader().getResource("log4j.properties");
				System.setProperty("log.file",
								   "main");
				System.setProperty("log.dir",
					           	   App.INSTANCE.getLogDir());
				PropertyConfigurator.configure(objURLLogFile);
				objLogger = Logger.getLogger(Main.class.getName());
				System.out.println("Generating a ValidationProcess object...");	
				objValidationProcess = new ValidationProcess(strArrayPrimaryModelNames);
				objValidationProcess.start();
			}
			else {
				throw new RuntimeException("Unable to continue without any application configuration file");
			}
		}
		catch (Exception e) {
			e.printStackTrace();
			objLogger.fatal("Main.main", 
					        e);
		}		
	}
}