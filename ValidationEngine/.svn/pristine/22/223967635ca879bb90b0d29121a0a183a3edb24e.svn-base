package io;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.lang.NoSuchFieldException;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.apache.log4j.Logger;

public class LocSummaryReader {

	static Logger objLogger = Logger.getLogger(LocSummaryReader.class.getName());
	public static final String TAB = "\t";
	private Map<String, Map<Integer, Double>> mapEstimates;
	private List<Map<String, String>> lstMapLocSummaryData;

	public LocSummaryReader(Path objInLocSummaryFilePath) throws NoSuchFieldException {
		BufferedReader objBufferedReader;
		int intLineNumber;
		String strLine;
		String[] strArrayHeaders;
		ArrayList<String> lstHeaders;
		int intTraitNameColumnIndex;
		int intLocIdColumnIndex;
		int intEstimateColumnIndex;
		String[] strArrayLineParts;
		String strTraitName;
		Map<Integer, Double> mapEstimates;
		Map<String, String> mapDataLine;
		int intArrayIndex;
		Map<Integer, Double> objTreeMap;
		
		this.mapEstimates = new HashMap<String, Map<Integer, Double>>();
		this.lstMapLocSummaryData = new ArrayList<Map<String, String>>();
		objBufferedReader = null;
		intLineNumber = 0;
		strArrayHeaders = null;
		intTraitNameColumnIndex = -1;
		intLocIdColumnIndex = -1;
		intEstimateColumnIndex = -1;
		try {
			objBufferedReader = new BufferedReader(new FileReader(objInLocSummaryFilePath.toFile()));
			while ((strLine = objBufferedReader.readLine()) != null) {
				intLineNumber++;
				////////////////
				// The headers  
				////////////////
				if (intLineNumber == 1) {
					strArrayHeaders = strLine.trim().split(TAB);
					lstHeaders = new ArrayList<String>(Arrays.asList(strArrayHeaders));
					//System.out.println("Headers: " + lstHeaders.toString());
					try {
						///////////////////
						// traitVatString 
						///////////////////
						if (!(lstHeaders.contains("traitVatString"))) {
							throw new NoSuchFieldException("No traitVatString column in " + 
                                                           objInLocSummaryFilePath.toString());
						}
						else {
							intTraitNameColumnIndex = lstHeaders.indexOf("traitVatString");
						}
						
						//////////
						// locId  
						//////////
						if (!(lstHeaders.contains("locId"))) {
							throw new NoSuchFieldException("No locId column in " + 
						                                   objInLocSummaryFilePath.toString());
						}
						else {
							intLocIdColumnIndex = lstHeaders.indexOf("locId");
						}

						/////////////
						// estimate    
						/////////////
						if (!(lstHeaders.contains("estimate"))) {
							throw new NoSuchFieldException("No estimate column in " + 
                                                           objInLocSummaryFilePath.toString());
						}
						else {
							intEstimateColumnIndex = lstHeaders.indexOf("estimate");
						}
					}
					catch (NoSuchFieldException e) {
						e.printStackTrace();
						objLogger.error("LocSummaryReader.LocSummaryReader", 
				                        e);
						throw new RuntimeException();
					}
				}
				///////////////////
				// The data lines  
				///////////////////
				else {
					strArrayLineParts = strLine.split(TAB,
	                                                  strArrayHeaders.length);
					try {
						if (strArrayHeaders.length == strArrayLineParts.length) {
							strTraitName = strArrayLineParts[intTraitNameColumnIndex];

							///////////////////
							// Estimates List  
							///////////////////
							/////////////////////////////////////////////////////////////////////////////////
							// Note: There is sometimes not data in the estimate column for determined rows  
							/////////////////////////////////////////////////////////////////////////////////
							if (strArrayLineParts[intEstimateColumnIndex].equals("")) {
								System.err.println("No data in the estimate column in " + objInLocSummaryFilePath.toString() + 
										           " in the row #" + intLineNumber);
							}
							else {
								try {
									if (this.mapEstimates.containsKey(strTraitName)) {
										mapEstimates = this.mapEstimates.get(strTraitName);
									}
									else {
										mapEstimates = new HashMap<Integer, Double>();
									}
									mapEstimates.put(Integer.parseInt(strArrayLineParts[intLocIdColumnIndex]),
											         Double.parseDouble(strArrayLineParts[intEstimateColumnIndex]));
									this.mapEstimates.put(strTraitName, 
								                      	  mapEstimates);
								}
								catch (NumberFormatException e) {
									e.printStackTrace();
									objLogger.error("LocSummaryReader.LocSummaryReader", 
				                                	e);
									throw new RuntimeException();
								}
							}

							//////////////
							// Data Line 
							//////////////
							mapDataLine = new HashMap<String, String>();
							for (intArrayIndex = 0;
							     intArrayIndex < strArrayLineParts.length;	
									intArrayIndex++) {
								mapDataLine.put(strArrayHeaders[intArrayIndex], 
									            strArrayLineParts[intArrayIndex]);
							}
							this.lstMapLocSummaryData.add(mapDataLine);
						}
						else {
							throw new NoSuchFieldException("Inconsistency in the headers and fields numbers in " + 
                                                           objInLocSummaryFilePath.toString());
						}
					}
					catch (NoSuchFieldException e) {
						e.printStackTrace();
						objLogger.error("LocSummaryReader.LocSummaryReader", 
				                        e);
						throw new RuntimeException();
					}
				}
			}
		}
		catch (IOException e) {
			e.printStackTrace();
			objLogger.error("LocSummaryReader.LocSummaryReader",
					        e);
			throw new RuntimeException();
		}
		finally {
			try {
				if (objBufferedReader != null) {
					objBufferedReader.close();
				}
			} 
			catch (IOException e) {
				e.printStackTrace();
				objLogger.error("LocSummaryReader.LocSummaryReader", 
        		                e);	
				throw new RuntimeException();
			}
		}
		
		/////////////////////////////////////////////////
		// Sorts each estimates map basing on the locId  
		/////////////////////////////////////////////////
		for (String strKey : this.mapEstimates.keySet()) {
			mapEstimates = this.mapEstimates.get(strKey);
			objTreeMap = new TreeMap<Integer, Double>(mapEstimates);
			this.mapEstimates.put(strKey,
					              objTreeMap);
		}		
	}
	
	public Map<String, Map<Integer, Double>> getEstimates() {
		return this.mapEstimates;
	}

	public List<Map<String, String>> getData() {
		return this.lstMapLocSummaryData;
	}	
}
